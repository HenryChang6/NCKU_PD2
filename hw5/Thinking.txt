1.Understanding the problem: First and foremost, understanding the problem is the key to implementing a solution.

The goal is to create a simple search engine. Given a corpus of texts, each with a unique ID, and a set of queries

(each query may contain 1~3 keywords), the task is to return the IDs of the texts that contain all the keywords in

a query. If there are no matches, return "-1".



2.Data Structures: To solve this problem efficiently, I decided to use an inverted index. An inverted index is a 

data structure used to store mapping from words to their location in a document (or set of documents). In this case,

I used an unordered_map to implement the inverted index where each word is a key and the value is a set of IDs of 

the documents containing that word. I chose unordered_map because it provides average constant-time complexity for 

search, insert, and delete operations. The set was used to keep the IDs unique and sorted.



3.Preprocessing: The documents and the queries need to be preprocessed. This involves tokenizing the text into individual

words, converting them to lower case and removing punctuation marks. This ensures that the search is case-insensitive and

is not affected by punctuation.



4.Building the Index: I read each document from the corpus, processed each word and added it to the index along with its

corresponding document ID. Each word in the document becomes a key in the map and the document ID is added to the set of

IDs associated with that word.



5.Processing Queries: For each query, I found the set of document IDs associated with each keyword in the index and computed

the intersection of these sets. This gives the set of document IDs where all the keywords appear. If the intersection is empty,

it means there are no documents where all the keywords appear, in which case I returned "-1".



6.Output: The output for each query is a set of document IDs where all the keywords appear. These are printed to the console.



7.Efficiency Considerations: The problem stated that the corpus could be larger than 100MB and that there could be more than

10,000 queries. This means the solution needs to be efficient in terms of both time and space. The use of an inverted index

allows for efficient querying as the time complexity is proportional to the number of keywords in the query, rather than the

size of the corpus. The space complexity is proportional to the number of unique words in the corpus.

